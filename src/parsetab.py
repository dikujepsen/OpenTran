
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x92\xbc\xf2?"Us\xe5ws\xd2d\xce\xd7?\x85'
    
_lr_action_items = {'LOGOR':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,51,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,51,-34,-61,-59,]),'SHORT':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,70,72,73,74,75,77,79,81,84,85,86,87,88,95,96,101,102,105,107,109,119,],[-84,6,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,6,-24,6,-11,-36,-70,6,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,6,-59,-63,]),'RSHIFT':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,49,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,49,-34,-61,-59,]),'VOID':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,70,72,73,74,75,77,79,81,84,85,86,87,88,95,96,101,102,105,107,109,119,],[-84,9,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,9,-24,9,-11,-36,-70,9,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,9,-59,-63,]),'NE':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,62,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,62,-34,-61,-59,]),'CHAR':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,70,72,73,74,75,77,79,81,84,85,86,87,88,95,96,101,102,105,107,109,119,],[-84,13,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,13,-24,13,-11,-36,-70,13,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,13,-59,-63,]),'LOGNOT':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,64,65,66,67,68,69,72,73,74,75,77,78,81,82,83,84,85,86,87,88,95,96,101,102,105,109,119,],[-84,14,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-17,-18,14,-19,-20,-82,-24,14,-11,-36,-70,14,-62,14,14,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,-59,-63,]),'FLOAT_CONST':([0,1,2,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,21,22,23,24,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,78,81,82,83,84,85,86,87,88,95,96,101,102,105,106,109,112,119,],[-84,42,-11,-3,42,-74,-65,-41,-72,-7,-40,-73,-29,-66,-81,-28,-12,-25,-80,-76,-5,-10,-42,-84,42,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-48,-47,-54,-50,42,-51,-52,-56,42,-53,-55,-44,-49,-46,-57,-45,-58,42,-17,-18,42,-19,-20,-82,-24,42,-11,-36,-70,42,-62,42,42,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,42,-59,42,-63,]),'LSHIFT':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,58,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,58,-34,-61,-59,]),'MINUS':([0,1,2,4,6,7,8,9,10,11,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,64,65,66,67,68,69,72,73,74,75,76,77,78,81,82,83,84,85,86,87,88,95,96,101,102,105,109,119,],[-84,17,-11,-3,-74,-65,-41,-72,-7,61,-35,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-17,-18,17,-19,-20,-82,-24,17,-11,-36,-35,-70,17,-62,17,17,-60,-38,-35,-37,61,-67,-34,-68,-69,-61,-59,-63,]),'DIVIDE':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,50,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,50,-34,-61,-59,]),'COMMENT':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,72,73,74,75,77,81,84,85,86,87,88,95,96,101,102,105,109,119,],[-84,18,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,-24,18,-11,-36,-70,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,-59,-63,]),'INT_CONST':([0,1,2,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,21,22,23,24,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,78,81,82,83,84,85,86,87,88,95,96,101,102,105,106,109,112,119,],[-84,19,-11,-3,19,-74,-65,-41,-72,-7,-40,-73,-29,-66,-81,-28,-12,-25,-80,-76,-5,-10,-42,-84,19,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-48,-47,-54,-50,19,-51,-52,-56,19,-53,-55,-44,-49,-46,-57,-45,-58,19,-17,-18,19,-19,-20,-82,-24,19,-11,-36,-70,19,-62,19,19,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,19,-59,19,-63,]),'LE':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,56,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,56,-34,-61,-59,]),'RPAREN':([7,19,30,31,42,44,45,71,75,76,79,81,84,85,86,87,88,96,98,99,100,105,107,109,111,114,115,116,117,],[-65,-25,-83,-27,-26,-66,-64,-71,-36,96,-84,-62,-60,-38,-35,-37,-39,-34,-14,-15,108,-61,-84,-59,-13,118,-30,-31,-33,]),'SEMI':([7,8,12,19,25,26,30,31,32,33,42,43,44,45,71,75,80,81,84,85,86,87,88,89,92,96,97,104,105,108,109,110,],[-65,-41,-40,-25,72,-42,-83,-27,77,-36,-26,-32,-66,-64,-71,-36,101,-62,-60,-38,-35,-37,-39,-23,106,-34,-21,-22,-61,-16,-59,112,]),'UNSIGNED':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,70,72,73,74,75,77,79,81,84,85,86,87,88,95,96,101,102,105,107,109,119,],[-84,21,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,21,-24,21,-11,-36,-70,21,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,21,-59,-63,]),'LONG':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,70,72,73,74,75,77,79,81,84,85,86,87,88,95,96,101,102,105,107,109,119,],[-84,22,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,22,-24,22,-11,-36,-70,22,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,22,-59,-63,]),'LT':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,55,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,55,-34,-61,-59,]),'PLUS':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,57,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,57,-34,-61,-59,]),'COMMA':([30,71,98,],[-83,-71,107,]),'TIMESEQUALS':([15,30,32,41,71,81,84,90,93,94,105,109,],[68,-83,68,68,-71,-62,-60,68,68,68,-61,-59,]),'$end':([0,1,2,3,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,72,75,77,81,84,85,86,87,88,95,96,101,102,105,109,119,],[-84,-1,-2,0,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,-24,-36,-70,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,-59,-63,]),'GT':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,48,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,48,-34,-61,-59,]),'RBRACE':([4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,72,73,74,75,77,81,84,85,86,87,88,95,96,101,102,105,109,119,],[-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,-24,95,-11,-36,-70,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,-59,-63,]),'FOR':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,72,73,74,75,77,81,84,85,86,87,88,95,96,101,102,105,109,119,],[-84,20,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,-24,20,-11,-36,-70,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,-59,-63,]),'PLUSPLUS':([7,19,30,31,42,44,45,81,84,105,109,113,],[-65,-25,-83,-27,-26,-66,-64,-62,-60,-61,-59,115,]),'EQUALS':([15,30,32,41,71,81,84,90,93,94,105,109,],[64,-83,64,64,-71,-62,-60,64,64,64,-61,-59,]),'TIMES':([6,7,9,11,12,13,15,16,19,21,22,30,31,33,36,38,39,40,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-74,-65,-72,54,-35,-73,-66,69,-25,-80,-76,-83,-27,-36,-75,-77,-79,-78,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,54,-34,-61,-59,]),'PLUSEQUALS':([15,30,32,41,71,81,84,90,93,94,105,109,],[65,-83,65,65,-71,-62,-60,65,65,65,-61,-59,]),'GE':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,53,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,53,-34,-61,-59,]),'LPAREN':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,73,74,75,77,78,81,82,83,84,85,86,87,88,95,96,101,102,105,106,109,119,],[-84,28,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,70,-80,-76,-5,-10,-42,-84,28,-6,-83,-27,79,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-48,-47,-54,-50,28,-51,-52,-56,28,-53,-55,-44,-49,-46,-57,-45,-58,28,-17,-18,28,-19,-20,-82,-71,-24,28,-11,-36,-70,28,-62,28,28,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,28,-59,-63,]),'MINUSMINUS':([7,19,30,31,42,44,45,81,84,105,109,113,],[-65,-25,-83,-27,-26,-66,-64,-62,-60,-61,-59,116,]),'EQ':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,60,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,60,-34,-61,-59,]),'ID':([0,1,2,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,21,22,23,24,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,74,75,77,78,81,82,83,84,85,86,87,88,91,95,96,101,102,105,106,109,112,119,],[-84,30,-11,-3,30,-74,-65,-41,-72,-7,-40,-73,-29,-66,-81,-28,-12,-25,-80,-76,30,-10,-42,-84,30,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-48,-47,-54,-50,30,-51,-52,-56,30,-53,-55,-44,-49,-46,-57,-45,-58,30,-17,-18,30,-19,-20,-82,30,-24,30,-11,-36,-70,30,-62,30,30,-60,-38,-35,-37,-39,30,-67,-34,-68,-69,-61,30,-59,30,-63,]),'AND':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,46,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,46,-34,-61,-59,]),'LBRACKET':([30,41,45,84,94,109,],[-83,82,82,82,82,-59,]),'LBRACE':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,72,73,74,75,77,80,81,84,85,86,87,88,95,96,101,102,105,108,109,118,119,],[-84,27,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,-24,27,-11,-36,-70,27,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,-16,-59,27,-63,]),'STRING_LITERAL':([0,1,2,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,21,22,23,24,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,77,78,81,82,83,84,85,86,87,88,95,96,101,102,105,106,109,112,119,],[-84,31,-11,-3,31,-74,-65,-41,-72,-7,-40,-73,-29,-66,-81,-28,-12,-25,-80,-76,-5,-10,-42,-84,31,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-48,-47,-54,-50,31,-51,-52,-56,31,-53,-55,-44,-49,-46,-57,-45,-58,31,-17,-18,31,-19,-20,-82,-24,31,-11,-36,-70,31,-62,31,31,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,31,-59,31,-63,]),'LOGAND':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,52,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,52,-34,-61,-59,]),'INT':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,70,72,73,74,75,77,79,81,84,85,86,87,88,95,96,101,102,105,107,109,119,],[-84,36,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,36,-24,36,-11,-36,-70,36,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,36,-59,-63,]),'DOUBLE':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,70,72,73,74,75,77,79,81,84,85,86,87,88,95,96,101,102,105,107,109,119,],[-84,40,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,40,-24,40,-11,-36,-70,40,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,40,-59,-63,]),'FLOAT':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,70,72,73,74,75,77,79,81,84,85,86,87,88,95,96,101,102,105,107,109,119,],[-84,38,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,38,-24,38,-11,-36,-70,38,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,38,-59,-63,]),'SIGNED':([0,1,2,4,6,7,8,9,10,12,13,15,16,18,19,21,22,23,24,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,69,70,72,73,74,75,77,79,81,84,85,86,87,88,95,96,101,102,105,107,109,119,],[-84,39,-11,-3,-74,-65,-41,-72,-7,-40,-73,-66,-81,-12,-25,-80,-76,-5,-10,-42,-84,-6,-83,-27,-36,-8,-4,-75,-9,-77,-79,-78,-64,-26,-32,-66,-64,-82,39,-24,39,-11,-36,-70,39,-62,-60,-38,-35,-37,-39,-67,-34,-68,-69,-61,39,-59,-63,]),'MINUSEQUALS':([15,30,32,41,71,81,84,90,93,94,105,109,],[67,-83,67,67,-71,-62,-60,67,67,67,-61,-59,]),'RBRACKET':([7,8,12,19,26,30,31,33,42,43,44,45,75,81,84,85,86,87,88,96,103,105,109,],[-65,-41,-40,-25,-42,-83,-27,-36,-26,-32,-66,-64,-36,-62,-60,-38,-35,-37,-39,-34,109,-61,-59,]),'OR':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,47,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,47,-34,-61,-59,]),'MOD':([7,11,12,15,19,30,31,33,41,42,44,45,75,76,81,84,85,86,87,88,96,105,109,],[-65,59,-35,-66,-25,-83,-27,-36,-64,-26,-66,-64,-36,-35,-62,-60,-38,-35,-37,59,-34,-61,-59,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'comment':([1,73,],[4,4,]),'unary_token_before':([1,66,73,78,82,83,],[5,5,5,5,5,5,]),'constant':([1,5,28,50,54,63,66,73,78,82,83,106,112,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'unary_expression':([1,66,73,78,82,83,],[8,8,8,8,8,8,]),'declaration':([1,73,],[29,29,]),'binop_paren':([1,28,50,54,63,66,73,78,82,83,106,],[11,11,85,87,88,11,11,11,11,11,11,]),'unary_token_after':([113,],[117,]),'binop_expression':([1,28,50,54,63,66,73,78,82,83,106,],[12,76,86,86,86,12,12,12,12,12,12,]),'increment':([112,],[114,]),'native_type':([1,70,73,79,107,],[16,16,16,16,16,]),'arglist':([32,],[80,]),'binary_token':([11,85,87,88,],[63,63,63,63,]),'array_reference':([1,5,28,50,54,63,66,70,73,78,82,83,106,112,],[15,44,44,44,44,44,44,90,15,44,44,44,44,44,]),'subscript':([41,45,84,94,],[84,84,84,84,]),'arg_params':([79,107,],[100,111,]),'type':([1,70,73,79,107,],[23,91,23,91,91,]),'empty':([0,27,79,107,],[2,74,99,99,]),'for_loop':([1,73,],[24,24,]),'assignment_expression':([1,70,73,],[25,92,25,]),'beginning_list':([0,27,],[1,73,]),'binop':([1,66,73,78,82,83,106,],[26,26,26,26,26,26,110,]),'compound':([1,73,80,118,],[10,10,102,119,]),'typeid':([1,70,73,79,107,],[32,93,32,98,98,]),'term':([1,5,28,50,54,63,66,73,78,82,83,106,112,],[33,43,75,75,75,75,33,33,33,33,33,75,113,]),'assignment_expression_semi':([1,73,],[34,34,]),'subscript_list':([41,45,84,94,],[81,81,105,81,]),'function_declaration':([1,73,],[35,35,]),'expr':([1,66,73,78,82,83,],[37,89,37,97,103,104,]),'assignment_operator':([15,32,41,90,93,94,],[66,78,83,66,78,83,]),'identifier':([1,5,23,28,50,54,63,66,70,73,78,82,83,91,106,112,],[41,45,71,45,45,45,45,45,94,41,45,45,45,71,45,45,]),'first':([0,],[3,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> first","S'",1,None,None,None),
  ('first -> beginning_list','first',1,'p_first','lan_parser.py',14),
  ('first -> empty','first',1,'p_first','lan_parser.py',15),
  ('beginning_list -> beginning_list comment','beginning_list',2,'p_beginning_list','lan_parser.py',22),
  ('beginning_list -> beginning_list function_declaration','beginning_list',2,'p_beginning_list','lan_parser.py',23),
  ('beginning_list -> beginning_list type','beginning_list',2,'p_beginning_list','lan_parser.py',24),
  ('beginning_list -> beginning_list declaration','beginning_list',2,'p_beginning_list','lan_parser.py',25),
  ('beginning_list -> beginning_list compound','beginning_list',2,'p_beginning_list','lan_parser.py',26),
  ('beginning_list -> beginning_list assignment_expression_semi','beginning_list',2,'p_beginning_list','lan_parser.py',27),
  ('beginning_list -> beginning_list expr','beginning_list',2,'p_beginning_list','lan_parser.py',28),
  ('beginning_list -> beginning_list for_loop','beginning_list',2,'p_beginning_list','lan_parser.py',29),
  ('beginning_list -> empty','beginning_list',1,'p_beginning_list','lan_parser.py',30),
  ('comment -> COMMENT','comment',1,'p_comment','lan_parser.py',42),
  ('arg_params -> typeid COMMA arg_params','arg_params',3,'p_arg_params','lan_parser.py',48),
  ('arg_params -> typeid','arg_params',1,'p_arg_params','lan_parser.py',49),
  ('arg_params -> empty','arg_params',1,'p_arg_params','lan_parser.py',50),
  ('arglist -> LPAREN arg_params RPAREN','arglist',3,'p_arglist','lan_parser.py',58),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','lan_parser.py',62),
  ('assignment_operator -> PLUSEQUALS','assignment_operator',1,'p_assignment_operator','lan_parser.py',63),
  ('assignment_operator -> MINUSEQUALS','assignment_operator',1,'p_assignment_operator','lan_parser.py',64),
  ('assignment_operator -> TIMESEQUALS','assignment_operator',1,'p_assignment_operator','lan_parser.py',65),
  ('assignment_expression -> typeid assignment_operator expr','assignment_expression',3,'p_assignment_expression','lan_parser.py',70),
  ('assignment_expression -> identifier assignment_operator expr','assignment_expression',3,'p_assignment_expression','lan_parser.py',71),
  ('assignment_expression -> array_reference assignment_operator expr','assignment_expression',3,'p_assignment_expression','lan_parser.py',72),
  ('assignment_expression_semi -> assignment_expression SEMI','assignment_expression_semi',2,'p_assignment_expression_semi','lan_parser.py',77),
  ('constant -> INT_CONST','constant',1,'p_constant','lan_parser.py',82),
  ('constant -> FLOAT_CONST','constant',1,'p_constant','lan_parser.py',83),
  ('constant -> STRING_LITERAL','constant',1,'p_constant','lan_parser.py',84),
  ('unary_token_before -> MINUS','unary_token_before',1,'p_unary_token_before','lan_parser.py',89),
  ('unary_token_before -> LOGNOT','unary_token_before',1,'p_unary_token_before','lan_parser.py',90),
  ('unary_token_after -> PLUSPLUS','unary_token_after',1,'p_unary_token_after','lan_parser.py',95),
  ('unary_token_after -> MINUSMINUS','unary_token_after',1,'p_unary_token_after','lan_parser.py',96),
  ('unary_expression -> unary_token_before term','unary_expression',2,'p_unary_expression','lan_parser.py',101),
  ('increment -> term unary_token_after','increment',2,'p_increment','lan_parser.py',105),
  ('binop_paren -> LPAREN binop_expression RPAREN','binop_paren',3,'p_binop_paren','lan_parser.py',110),
  ('binop_paren -> binop_expression','binop_paren',1,'p_binop_paren','lan_parser.py',111),
  ('binop_expression -> term','binop_expression',1,'p_binop_expression','lan_parser.py',119),
  ('binop_expression -> binop_paren TIMES binop_paren','binop_expression',3,'p_binop_expression','lan_parser.py',120),
  ('binop_expression -> binop_paren DIVIDE binop_paren','binop_expression',3,'p_binop_expression','lan_parser.py',121),
  ('binop_expression -> binop_paren binary_token binop_paren','binop_expression',3,'p_binop_expression','lan_parser.py',122),
  ('binop -> binop_expression','binop',1,'p_binop','lan_parser.py',129),
  ('expr -> unary_expression','expr',1,'p_expr','lan_parser.py',137),
  ('expr -> binop','expr',1,'p_expr','lan_parser.py',138),
  ('expr -> term','expr',1,'p_expr','lan_parser.py',139),
  ('binary_token -> PLUS','binary_token',1,'p_binary_token','lan_parser.py',145),
  ('binary_token -> MINUS','binary_token',1,'p_binary_token','lan_parser.py',146),
  ('binary_token -> MOD','binary_token',1,'p_binary_token','lan_parser.py',147),
  ('binary_token -> OR','binary_token',1,'p_binary_token','lan_parser.py',148),
  ('binary_token -> AND','binary_token',1,'p_binary_token','lan_parser.py',149),
  ('binary_token -> LSHIFT','binary_token',1,'p_binary_token','lan_parser.py',150),
  ('binary_token -> RSHIFT','binary_token',1,'p_binary_token','lan_parser.py',151),
  ('binary_token -> LOGOR','binary_token',1,'p_binary_token','lan_parser.py',152),
  ('binary_token -> LOGAND','binary_token',1,'p_binary_token','lan_parser.py',153),
  ('binary_token -> LT','binary_token',1,'p_binary_token','lan_parser.py',154),
  ('binary_token -> GT','binary_token',1,'p_binary_token','lan_parser.py',155),
  ('binary_token -> LE','binary_token',1,'p_binary_token','lan_parser.py',156),
  ('binary_token -> GE','binary_token',1,'p_binary_token','lan_parser.py',157),
  ('binary_token -> EQ','binary_token',1,'p_binary_token','lan_parser.py',158),
  ('binary_token -> NE','binary_token',1,'p_binary_token','lan_parser.py',159),
  ('subscript -> LBRACKET expr RBRACKET','subscript',3,'p_subscript','lan_parser.py',165),
  ('subscript_list -> subscript','subscript_list',1,'p_subscript_list','lan_parser.py',169),
  ('subscript_list -> subscript subscript_list','subscript_list',2,'p_subscript_list','lan_parser.py',170),
  ('array_reference -> identifier subscript_list','array_reference',2,'p_array_reference','lan_parser.py',178),
  ('for_loop -> FOR LPAREN assignment_expression SEMI binop SEMI increment RPAREN compound','for_loop',9,'p_for_loop','lan_parser.py',184),
  ('term -> identifier','term',1,'p_term','lan_parser.py',191),
  ('term -> constant','term',1,'p_term','lan_parser.py',192),
  ('term -> array_reference','term',1,'p_term','lan_parser.py',193),
  ('compound -> LBRACE beginning_list RBRACE','compound',3,'p_compound','lan_parser.py',199),
  ('function_declaration -> typeid arglist SEMI','function_declaration',3,'p_func_decl_1','lan_parser.py',203),
  ('function_declaration -> typeid arglist compound','function_declaration',3,'p_func_decl_2','lan_parser.py',207),
  ('declaration -> typeid SEMI','declaration',2,'p_decl','lan_parser.py',211),
  ('typeid -> type identifier','typeid',2,'p_typeid','lan_parser.py',215),
  ('native_type -> VOID','native_type',1,'p_native_type','lan_parser.py',220),
  ('native_type -> CHAR','native_type',1,'p_native_type','lan_parser.py',221),
  ('native_type -> SHORT','native_type',1,'p_native_type','lan_parser.py',222),
  ('native_type -> INT','native_type',1,'p_native_type','lan_parser.py',223),
  ('native_type -> LONG','native_type',1,'p_native_type','lan_parser.py',224),
  ('native_type -> FLOAT','native_type',1,'p_native_type','lan_parser.py',225),
  ('native_type -> DOUBLE','native_type',1,'p_native_type','lan_parser.py',226),
  ('native_type -> SIGNED','native_type',1,'p_native_type','lan_parser.py',227),
  ('native_type -> UNSIGNED','native_type',1,'p_native_type','lan_parser.py',228),
  ('type -> native_type','type',1,'p_type','lan_parser.py',233),
  ('type -> native_type TIMES','type',2,'p_type','lan_parser.py',234),
  ('identifier -> ID','identifier',1,'p_identifier','lan_parser.py',241),
  ('empty -> <empty>','empty',0,'p_empty','lan_parser.py',247),
]
