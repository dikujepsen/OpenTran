__kernel void NBodyFor(
	__global float * Mas, __global float * Pos, __global float * Forces
	) {
  float a_x = Pos[(0 * hst_ptrPos_dim1) + get_global_id(0)];
  float a_y = Pos[(1 * hst_ptrPos_dim1) + get_global_id(0)];
  float a_m = Mas[get_global_id(0)];
  float f_x = 0;
  float f_y = 0;
  for (unsigned j = 0; j < N; j+=32) {
      float d;
      float b_y;
      float b_m;
      float r_x;
      float r_y;
      float deno;
      float b_x;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 0)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 0)];
          b_m = Mas[j + 0];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 0));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 0));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 1)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 1)];
          b_m = Mas[j + 1];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 1));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 1));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 2)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 2)];
          b_m = Mas[j + 2];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 2));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 2));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 3)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 3)];
          b_m = Mas[j + 3];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 3));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 3));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 4)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 4)];
          b_m = Mas[j + 4];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 4));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 4));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 5)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 5)];
          b_m = Mas[j + 5];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 5));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 5));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 6)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 6)];
          b_m = Mas[j + 6];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 6));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 6));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 7)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 7)];
          b_m = Mas[j + 7];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 7));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 7));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 8)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 8)];
          b_m = Mas[j + 8];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 8));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 8));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 9)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 9)];
          b_m = Mas[j + 9];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 9));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 9));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 10)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 10)];
          b_m = Mas[j + 10];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 10));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 10));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 11)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 11)];
          b_m = Mas[j + 11];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 11));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 11));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 12)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 12)];
          b_m = Mas[j + 12];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 12));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 12));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 13)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 13)];
          b_m = Mas[j + 13];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 13));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 13));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 14)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 14)];
          b_m = Mas[j + 14];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 14));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 14));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 15)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 15)];
          b_m = Mas[j + 15];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 15));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 15));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 16)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 16)];
          b_m = Mas[j + 16];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 16));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 16));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 17)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 17)];
          b_m = Mas[j + 17];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 17));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 17));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 18)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 18)];
          b_m = Mas[j + 18];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 18));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 18));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 19)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 19)];
          b_m = Mas[j + 19];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 19));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 19));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 20)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 20)];
          b_m = Mas[j + 20];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 20));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 20));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 21)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 21)];
          b_m = Mas[j + 21];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 21));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 21));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 22)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 22)];
          b_m = Mas[j + 22];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 22));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 22));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 23)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 23)];
          b_m = Mas[j + 23];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 23));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 23));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 24)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 24)];
          b_m = Mas[j + 24];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 24));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 24));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 25)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 25)];
          b_m = Mas[j + 25];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 25));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 25));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 26)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 26)];
          b_m = Mas[j + 26];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 26));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 26));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 27)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 27)];
          b_m = Mas[j + 27];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 27));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 27));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 28)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 28)];
          b_m = Mas[j + 28];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 28));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 28));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 29)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 29)];
          b_m = Mas[j + 29];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 29));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 29));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 30)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 30)];
          b_m = Mas[j + 30];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 30));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 30));
          f_x += deno * r_x;
          f_y += deno * r_y;
          b_x = Pos[(0 * hst_ptrPos_dim1) + (j + 31)];
          b_y = Pos[(1 * hst_ptrPos_dim1) + (j + 31)];
          b_m = Mas[j + 31];
          r_x = b_x - a_x;
          r_y = b_y - a_y;
          d = (r_x * r_x) + (r_y * r_y);
          deno = (sqrt((d * d) * d)) + (get_global_id(0) == (j + 31));
          deno = ((a_m * b_m) / deno) * (get_global_id(0) != (j + 31));
          f_x += deno * r_x;
          f_y += deno * r_y;
  }
  Forces[(0 * hst_ptrForces_dim1) + get_global_id(0)] = f_x;
  Forces[(1 * hst_ptrForces_dim1) + get_global_id(0)] = f_y;
}
